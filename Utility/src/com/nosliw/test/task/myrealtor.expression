{
	"name": "myrealtor",
	"description": "control",
	"tasks": [
		{
			"name" : "main",
			"type" : "expression",
			"steps" : [
				{
					"description" : "get school data, and save to variable",
					"type" : "expression",
					"expression": "<(school)>",
					"outputVariable" : "schoolData" 
				},
				{
					"description" : "get realtor data, and save to variable",
					"type" : "expression",
					"expression": "<(house)>",
					"outputVariable" : "houseData" 
				},
				
				{
					"description": "create output array",
					"type": "expression",
					"expression": "!(test.array)!.emptyArray()",
					"outputVariable": "output"
				},
				
				{
					"description": "loop element",
					"type": "loop",
					"container": "?(houseData)?",
					"elementVariable": "house",
					"executeTask": "<(processHouse)>",
					"outputVariable": "output"
				},
			],
			"references": {
				"school": {
					"variablesMap": {
					}
				},
				"house": {
					"variablesMap": {
					}
				},
				"processHouse": {
					"variablesMap": {
						"schoolData" : "schoolData",
						"house" : "house",
						"output" : "output",
						
					}
				},
			},
			"constants" : {
				"eleName" : {
					dataTypeId: "test.string;1.0.0",
					value: "house"
				},
				"processTaskName" : {
					dataTypeId: "test.string;1.0.0",
					value: "filterHouse"
				}
			}
		},
		{
			"description" : "process single house, if is valid house, attach school information to it",
			"name" : "processHouse",
			"type" : "expression",
			"steps" : [

				{
					"description": "create valid school variable",
					"type": "expression",
					"expression": "!(test.string)!.emptyString()",
					"outputVariable": "validSchool"
				},
			
				{
					"description": "loop element",
					"type": "loop",
					"container": "?(schoolData)?",
					"elementVariable": "school",
					"executeTask": "<(houseSchoolMatch)>",
					"outputVariable": "validSchool"
				},
				{
					"description" : "",
					"type" : "branch",
					"expression": "?(validSchool)?.isEmpty()",
					"false" : {
						"next" : "merge"
					},
					"true" : {
						"next" : "exit"
					}
				},
				{
					"name" : "exit",
					"description" : "",
					"type" : "expression",
					"expression": "?(output)?",
					"exit" : true
				},
				{
					"name" : "merge",
					"description" : "",
					"type" : "expression",
					"expression": "?(output)?.add(child:?(house)?.setChildData(name:&(schoolAttributeName)&,value:?(validSchool)?))",
				},
			],
			"references": {
				"houseSchoolMatch" : {
					"variablesMap": {
						"validSchool" : "validSchool",
						"school" : "school",
						"house" : "house",
					}
				}
			},
			"variables" : {
				"schoolData" : "test.array;1.0.0",
				"house" : "test.map;1.0.0",
				"output": "test.array;1.0.0"
			},
			"constants" : {
				"eleName" : {
					dataTypeId: "test.string;1.0.0",
					value: "school"
				},
			}
		},
		{
			"description" : "if house match with a school",
			"name" : "houseSchoolMatch",
			"type" : "expression",
			"steps" : [
				{
					"description" : "",
					"type" : "branch",
					"expression": "?(validSchool)?.isEmpty()",
					"false" : {
						"next" : "exit"
					},
					"true" : {
						"next" : "match"
					}
				},
				{
					"name" : "exit",
					"description" : "",
					"type" : "expression",
					"expression": "?(validSchool)?",
					"exit" : true
				},
				{
					"name" : "match",
					"description" : "find  ",
					"type" : "expression",
					"expression": "!(test.geo)!.distance(from:?(school)?.geo,to:?(house)?.geo).shorterThan(dis2:&(distance)&)",
					"outputVariable" : "isMatch" 
				},
				{
					"description" : "",
					"type" : "branch",
					"expression": "?(isMatch)?",
					"false" : {
						"next" : "exit"
					},
					"true" : {
						"next" : "setOutput"
					}
				},
				{
					"name" : "setOutput",
					"description" : "",
					"type" : "expression",
					"expression": "?(school)?",
					"outputVariable" : "validSchool" 
				},
			],
			"references": {
			},
			"variables" : {
				"validSchool" : "test.string;1.0.0",
				"school" : "test.map;1.0.0",
				"house" : "test.map;1.0.0",
			},
			"constants" : {
				"distance" : {
					dataTypeId: "test.distance;1.0.0",
					value: {
						distance : 10.0,
						unit : "km"
					}
				}
			}
		},
		{
			"description" : "get school data",
			"name" : "school",
			"type" : "dataSource",
			"dataSource" : "school",
			"parms" : {
			}
		},
		{
			"description" : "get house data",
			"name" : "house",
			"type" : "dataSource",
			"dataSource" : "realtor",
			"parms" : {
			}
		},
	],
	"constants": {
		"schoolAttributeName" : {
			"dataTypeId": "test.string;1.0.0",
			"value": "schoolName"
		}
	},
	"variables": {
		"schoolType" : "test.options;1.0.0",
		"schoolRating" : "test.float;1.0.0",
		"buildingType" : "test.optons;1.0.0",
	},
	"variablesData": {
		"schoolType": {
			"dataTypeId": "test.options;1.0.0",
			"value": "public"
		},
		"schoolRating": {
			dataTypeId: "test.float;1.0.0",
			value: 5.0
		},
		"buildingType": {
			"dataTypeId": "test.options;1.0.0",
			"value": "house"
		},
	},
	"result": {
		"dataTypeId": "test.string;1.0.0",
		"value": "sffffff",
		"wapperType": "JSON"
	}
}
