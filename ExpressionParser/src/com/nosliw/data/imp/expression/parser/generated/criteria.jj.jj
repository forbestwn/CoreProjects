/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. criteria.jj.jj */
/*@egen*/
options {
	/*create static method */
	STATIC = false ;
	/* the location for parser classes */
	OUTPUT_DIRECTORY = "c:/Temp/JCCTree/criteria";
}

PARSER_BEGIN(HAPCriteriaParserGenerated)
/* define the package name for parser classes */
package com.nosliw.data.imp.criteria.parser.generated;

public class HAPCriteriaParserGenerated/*@bgen(jjtree)*/implements HAPCriteriaParserGeneratedTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTHAPCriteriaParserGeneratedState jjtree = new JJTHAPCriteriaParserGeneratedState();

/*@egen*/

  public static void main(String args[]) throws ParseException, TokenMgrError {
		HAPCriteriaParserGenerated parser = new HAPCriteriaParserGenerated( System.in ) ;
		SimpleNode root = parser.Criteria(0);
		root.dump("");
  }  
}
PARSER_END(HAPCriteriaParserGenerated)


TOKEN : { < START_REFERENCE : "<||" > }
TOKEN : { < END_REFERENCE : "||>" > }
TOKEN : { < START_EXPRESSION : "@||" > }
TOKEN : { < END_EXPRESSION : "||@" > }
TOKEN : { < START_IDS : "#||" > }
TOKEN : { < END_IDS : "||#" > }
TOKEN : { < START_RANGE : "?||" > }
TOKEN : { < END_RANGE : "||?" > }
TOKEN : { < START_OR : "|||" > }
TOKEN : { < END_OR : "||}" > }
TOKEN : { < START_AND : "&||" > }
TOKEN : { < END_AND : "||&" > }
TOKEN : { < START_ELEMENT : "{" > }
TOKEN : { < END_ELEMENT : "}" > }


TOKEN : { < COMMAR : "," > }
TOKEN : { < ASSIGNMENT : ":" > }
TOKEN : { < ALL : "*" > }
TOKEN : { < NAME : (["0"-"9","a"-"z","A"-"Z", ".", "_", ";", "\t", "\n", "\r"])+ > }
TOKEN : { < EXPRESSION : (["0"-"9","a"-"z","A"-"Z", "(", ")", "<", ">", "&", "!", "?", "{", "}", "[", "]", "_", "#", "'"])+ > }


void allCriteria()             :
{/*@bgen(jjtree) ALLCRITERIA */
  SimpleNode jjtn000 = new SimpleNode(JJTALLCRITERIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ALLCRITERIA */
        try {
/*@egen*/
	<ALL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token referenceCriteria()             :
{/*@bgen(jjtree) ALLCRITERIA */
        SimpleNode jjtn000 = new SimpleNode(JJTALLCRITERIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) ALLCRITERIA */
        try {
/*@egen*/
	<START_REFERENCE> t=<NAME> <END_REFERENCE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image; return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token expressionCriteria()             :
{/*@bgen(jjtree) ALLCRITERIA */
        SimpleNode jjtn000 = new SimpleNode(JJTALLCRITERIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) ALLCRITERIA */
        try {
/*@egen*/
	<START_EXPRESSION> t=<EXPRESSION> <START_EXPRESSION>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image; return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode idCriteria()            :
{/*@bgen(jjtree) IDCRITERIA */
        SimpleNode jjtn000 = new SimpleNode(JJTIDCRITERIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) IDCRITERIA */
        try {
/*@egen*/
	t = <NAME>(childElementsCriteria())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value = t.image; return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void idsCriteria()             :
{/*@bgen(jjtree) IDSCRITERIA */
  SimpleNode jjtn000 = new SimpleNode(JJTIDSCRITERIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IDSCRITERIA */
        try {
/*@egen*/
	<START_IDS> idCriteria()(<COMMAR>idCriteria())* <END_IDS>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void rangeCriteria()            :
{/*@bgen(jjtree) IDCRITERIA */
  SimpleNode jjtn000 = new SimpleNode(JJTIDCRITERIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IDCRITERIA */
        try {
/*@egen*/
	(<START_RANGE>(<NAME>)*"-"(<NAME>)*(childElementsCriteria())*<END_RANGE>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode childElementCriteria(int index)                      :
{/*@bgen(jjtree) CHILDELEMENTCRITERIA */
        SimpleNode jjtn000 = new SimpleNode(JJTCHILDELEMENTCRITERIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t ;
}
{/*@bgen(jjtree) CHILDELEMENTCRITERIA */
        try {
/*@egen*/
	t=<NAME><ASSIGNMENT>Criteria(index)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	
	{jjtn000.value = t.image; return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode childElementsCriteria()                       :
{/*@bgen(jjtree) CHILDELEMENTSCRITERIA */
        SimpleNode jjtn000 = new SimpleNode(JJTCHILDELEMENTSCRITERIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int i = 0;
}
{/*@bgen(jjtree) CHILDELEMENTSCRITERIA */
        try {
/*@egen*/
	<START_ELEMENT> [(childElementCriteria(i){i++;})(<COMMAR>childElementCriteria(i){i++;})*]  <END_ELEMENT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

SimpleNode orCriteria()            :
{/*@bgen(jjtree) ORCRITERIA */
        SimpleNode jjtn000 = new SimpleNode(JJTORCRITERIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int i = 0;
}
{/*@bgen(jjtree) ORCRITERIA */
        try {
/*@egen*/
	<START_OR>
	(Criteria(i){i++;})(<COMMAR>Criteria(i){i++;})*
	<END_OR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode andCriteria()             :
{/*@bgen(jjtree) ANDCRITERIA */
        SimpleNode jjtn000 = new SimpleNode(JJTANDCRITERIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int i = 0;
}
{/*@bgen(jjtree) ANDCRITERIA */
        try {
/*@egen*/
	<START_AND>
	(Criteria(i){i++;})(<COMMAR>Criteria(i){i++;})*
	<END_AND>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


SimpleNode Criteria(int index)          :
{/*@bgen(jjtree) CRITERIA */
  SimpleNode jjtn000 = new SimpleNode(JJTCRITERIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) CRITERIA */
        try {
/*@egen*/
	(
		idCriteria()
		|
		idsCriteria()
		|
		rangeCriteria()
		|
		referenceCriteria()
		|
		expressionCriteria()
		|
		orCriteria ()
		|
		andCriteria ()
		|
		allCriteria ()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.value=index+"";   return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}