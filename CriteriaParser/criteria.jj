
options {
	/*create static method */
	STATIC = false ;
	/* the location for parser classes */
	OUTPUT_DIRECTORY = "c:/Temp/JCCTree/criteria";
}

PARSER_BEGIN(HAPCriteriaParserGenerated)
/* define the package name for parser classes */
package com.nosliw.data.imp.criteria.parser.generated;

public class HAPCriteriaParserGenerated {

  public static void main(String args[]) throws ParseException, TokenMgrError {
		HAPCriteriaParserGenerated parser = new HAPCriteriaParserGenerated( System.in ) ;
		SimpleNode root = parser.Criteria(0);
		root.dump("");
  }  
}
PARSER_END(HAPCriteriaParserGenerated)


TOKEN : { < START_REFERENCE : "<||" > }
TOKEN : { < END_REFERENCE : "||>" > }
TOKEN : { < START_EXPRESSION : "@||" > }
TOKEN : { < END_EXPRESSION : "||@" > }
TOKEN : { < START_IDS : "#||" > }
TOKEN : { < END_IDS : "||#" > }
TOKEN : { < START_RANGE : "?||" > }
TOKEN : { < END_RANGE : "||?" > }
TOKEN : { < START_OR : "^||" > }
TOKEN : { < END_OR : "||^" > }
TOKEN : { < START_AND : "&||" > }
TOKEN : { < END_AND : "||&" > }
TOKEN : { < START_ELEMENT : "{||" > }
TOKEN : { < END_ELEMENT : "||}" > }


TOKEN : { < COMMAR : "," > }
TOKEN : { < ASSIGNMENT : ":" > }
TOKEN : { < RANGE : "-" > }
TOKEN : { < ANY : "*" > }
TOKEN : { < NAME : (["0"-"9","a"-"z","A"-"Z", ".", "_", ";", "\t", "\n", "\r"])+ > }
TOKEN : { < EXPRESSION : (["0"-"9","a"-"z","A"-"Z", "(", ")", "<", ">", "&", "!", "?", "{", "}", "[", "]", "_", "#", "'"])+ > }


void anyCriteria() #ANYCRITERIA:
{
}
{
	<ANY>
	{}
}

Token referenceCriteria() #REFERENCECRITERIA:
{
	Token t ;
}
{
	<START_REFERENCE> t=<NAME> <END_REFERENCE>
	{jjtThis.value = t.image; return t;}
}

Token expressionCriteria() #EXPRESSIONCRITERIA:
{
	Token t ;
}
{
	<START_EXPRESSION> t=<EXPRESSION> <START_EXPRESSION>
	{jjtThis.value = t.image; return t;}
}

SimpleNode idCriteria() #IDCRITERIA:
{
	Token t ;
}
{
	t = <NAME>(childElementsCriteria())*
	{jjtThis.value = t.image; return jjtThis;}
}

void idsCriteria() #IDSCRITERIA:
{
}
{
	<START_IDS> idCriteria()(<COMMAR>idCriteria())* <END_IDS>
	{}
}

void rangeCriteria() #RANGECRITERIA:
{
	Token from = null;
	Token to = null;
}
{
	(<START_RANGE>(from=<NAME>)*<RANGE>(to=<NAME>)*(childElementsCriteria())*<END_RANGE>)
	{jjtThis.value = new String[]{from==null?null:from.image, to==null?null:to.image};                    }
}

SimpleNode childElementCriteria(int index) #CHILDELEMENTCRITERIA:
{
	Token t ;
}
{
	t=<NAME><ASSIGNMENT>Criteria(index)	
	{jjtThis.value = t.image; return jjtThis;}
}

SimpleNode childElementsCriteria() #CHILDELEMENTSCRITERIA:
{
	int i = 0;
}
{
	<START_ELEMENT> [(childElementCriteria(i){i++;})(<COMMAR>childElementCriteria(i){i++;})*]  <END_ELEMENT>
	{return jjtThis;}	
}

SimpleNode orCriteria() #ORCRITERIA:
{
	int i = 0;
}
{
	<START_OR>
	(Criteria(i){i++;})(<COMMAR>Criteria(i){i++;})*
	<END_OR>
	{return jjtThis;}
}

SimpleNode andCriteria() #ANDCRITERIA:
{
	int i = 0;
}
{
	<START_AND>
	(Criteria(i){i++;})(<COMMAR>Criteria(i){i++;})*
	<END_AND>
	{return jjtThis;}
}


SimpleNode Criteria(int index) #CRITERIA:
{
}
{
	(
		idCriteria()
		|
		idsCriteria()
		|
		rangeCriteria()
		|
		referenceCriteria()
		|
		expressionCriteria()
		|
		orCriteria ()
		|
		andCriteria ()
		|
		anyCriteria ()
	)
	{jjtThis.value=index+"";   return jjtThis;}
}
